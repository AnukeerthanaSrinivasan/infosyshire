const express = require("express");
const bcrypt = require("bcryptjs");
const jwt = require("jsonwebtoken");
const User = require("../models/User");
const sendOtp = require("../utils/sendOtp");

const router = express.Router();
// @POST /signup
let pendingsignup = {};
router.post("/signup", async (req, res) => {
  try {
    const { firstName, lastName, email, phone, password } = req.body;
    const otpCode = Math.floor(100000 + Math.random() * 900000).toString();
    const otpExpiresAt = new Date(Date.now() + 10 * 60 * 1000);
    let user = await User.findOne({ email });
    if (user) return res.status(400).json({ error: "User already exists" });

    const hashedPassword = await bcrypt.hash(password, 10);
    user = new User({
      firstName,
      lastName,
      email,
      phone,
      password: hashedPassword
    });
    await sendOtp(email, otpCode);
    pendingsignup[email] = { user, otpCode, otpExpiresAt };
    res.json({ message: "User registered, OTP sent to email", email });
  } catch (err) {
    res.status(500).json({ error: "Server error" });
  }
});

// @POST /verify-otp
router.post("/verify-otp", async (req, res) => {
  try {
    const { email, code } = req.body;
    user=pendingsignup[email].user;
    otpCode=pendingsignup[email].otpCode;
    if (otpCode != code) {
      return res.status(400).json({ error: "Invalid or expired OTP" });
    }
    await user.save();
    const token = jwt.sign({ id: user._id, email: user.email }, process.env.JWT_SECRET, { expiresIn: "2h" });
    res.json({ message: "Verified successfully", token });
  } catch (err) {
    res.status(500).json( err.message );
  }
});

// @POST /login
router.post("/login", async (req, res) => {
  try {
    const { email, password } = req.body;
    const user = await User.findOne({ email });
    if (!user) return res.status(400).json({ error: "Invalid credentials" });
    const isMatch = await bcrypt.compare(password, user.password);
    if (!isMatch) return res.status(400).json({ error: "Invalid credentials" });
    const token = jwt.sign({ id: user._id, email: user.email }, process.env.JWT_SECRET, { expiresIn: "2h" });
    res.json({ token });
  } catch (err) {
    res.status(500).json({ error: "Server error" });
  }
});

module.exports = router;
